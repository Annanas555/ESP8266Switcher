#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞.
#define BOTtoken "token"

//–ò–º—è –∏ –ø–∞—Ä–æ–ª—å —Å–µ—Ç–∏.
char ssid[] = "name";
char password[] = "password";
// –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
String buttons[] = {"Socket"};
// –ù–æ–º–µ—Ä –≤—ã–≤–æ–¥–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —Ä–µ–ª–µ (–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤).
int pin[] = {5};

// –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: 0 - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, 1 - –¥–æ—Å—Ç—É–ø –ø–æ Chat ID, –µ—Å–ª–∏ –æ–Ω–æ –≤–Ω–µ—Å–µ–Ω–æ –≤ accessChatID.
bool protection = 1;
// Chat ID, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ protection = 0.
int accessChatID[] = {0000000000};

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
String onIndicator = "üü¢ ";
// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
String offIndicator = "üî¥ ";

// –û–±—ä–µ–∫—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API.
WiFiClientSecure client;
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
UniversalTelegramBot bot(BOTtoken, client);

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
int quantity;
// –í—Ä–µ–º—è –≤ –º—Å –º–µ–∂–¥—É –æ–ø—Ä–æ—Å–æ–º –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
int botMs = 3000;
// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–∞.
long botLasttime;
// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞.
String keyboardJson = "";
// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "/control".
String lastControlMessageId = "";

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String m_id = String(bot.messages[i].message_id);
    if (bot.messages[i].type == "callback_query") {
      String statusMessage;
      for (int j = 0; j < quantity; j++) {
        if (bot.messages[i].text == buttons[j]) {
          // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ª–µ.
          digitalWrite (pin[j], !digitalRead(pin[j]));
        }
        // –í—ã–±–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        digitalRead(pin[j]) ? statusMessage += onIndicator : statusMessage += offIndicator;
        statusMessage += buttons[j]; 
        statusMessage += '\n';
      }
      // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è.
      bot.deleteMessage(bot.messages[i].chat_id, bot.messages[i].message_id);
      bot.sendMessageWithInlineKeyboard(bot.messages[i].chat_id, statusMessage, "", keyboardJson);
      
    } else {
      String text = bot.messages[i].text;
      Serial.println(m_id);
      String from_name = bot.messages[i].from_name;
      // –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–∞–∫ –∫ –≥–æ—Å—Ç—é.
      if (from_name == "") from_name = "–ì–æ—Å—Ç—å";
      bool commandRecognized = false;
      int k = 0;
      do {
        if (!protection || String(accessChatID[k]) == chat_id) {
          // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
          if (text == "/control") {
            if (lastControlMessageId != "") {
              // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.
              bot.sendMessage(chat_id, "–í—ã —É–∂–µ –≤—ã–∑–≤–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", "");
            } else {
              String statusMessage;
              for (int i = 0; i < quantity; i++) {
                digitalRead(pin[i]) ? statusMessage += onIndicator : statusMessage += offIndicator;
                statusMessage += buttons[i];
                statusMessage += '\n';
              }
              // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "/control".
              if (lastControlMessageId != "") {
                bot.deleteMessage(chat_id, lastControlMessageId);
              }
              // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
              lastControlMessageId = m_id;
              // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
              bot.sendMessageWithInlineKeyboard(chat_id, statusMessage, "", keyboardJson);
            }
            commandRecognized = true;
          }

          // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
          if (text == "/start") {
            String welcome = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + from_name + ".\n–≠—Ç–æ —É–º–Ω—ã–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ ESP8266, —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π —á–µ—Ä–µ–∑ Telegram.\n\n/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n/control - –ø–µ—Ä–µ–π—Ç–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é.\n";
            String keyboardStart = "[[{ \"text\" : \"GitHub —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\", \"url\" : \"https://github.com/Annanas555\" }]]";
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
            bot.sendMessageWithInlineKeyboard(chat_id, welcome, "", keyboardStart);
            commandRecognized = true;
          }

          // –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
          if (text == "/help") {
            String helpMessage = "–ù–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ.\nüü¢ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\nüî¥ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–º, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /control";
            bot.sendMessage(chat_id, helpMessage, "");
            commandRecognized = true;
          }
          break;
        } else {
          // –ï—Å–ª–∏ Chat ID –Ω–µ –≤–Ω–µ—Å–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.
          if (k == ((sizeof(accessChatID) / sizeof(int)) - 1) && text == "/start" || (sizeof(accessChatID) / sizeof(int)) == 0 && text == "/start") {
            bot.sendMessage(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–Ω–µ—Å–∏—Ç–µ Chat ID –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.\nChat ID: " + chat_id, "");
            commandRecognized = true;
          }
        }

        k++;
      }
      
      while (k < (sizeof(accessChatID) / sizeof(int)));
      
      if (!commandRecognized) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.
        bot.sendMessage(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!", "");
      }
    }
  }
}

void setup() {
  Serial.begin(115200);

  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);

  Serial.print("Connecting Wifi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  
  quantity = sizeof(pin) / sizeof(int);
  for (int i = 0; i < quantity; i++) {
    pinMode(pin[i], OUTPUT);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
  for (int i = 0; i < quantity; i++) {
    if (i == 0) keyboardJson += "[";
    keyboardJson += "[{ \"text\" : \"";
    keyboardJson += buttons[i];
    keyboardJson += "\", \"callback_data\" : \"";
    keyboardJson += buttons[i];
    keyboardJson += "\" }]";
    if (i == quantity - 1) {
      keyboardJson += "]";
    }
    else {
      keyboardJson += ",";
    }
  }
  delay(10);
  client.setInsecure();
}

void loop() {
  if (millis() > botLasttime + botMs)  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while(numNewMessages) {
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    botLasttime = millis();
  }
}
